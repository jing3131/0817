# HTML
<pre>			<!-- 可以照原排列列出 -->
Line 1
	Line 2
<?php print_r($bloodType);  ?>
</pre>


<ul>
    <?php for($i = 1; $i <= 3; $i++){ ?>        <!-- 可以用php包住html -->
        <li><?= $i ?></li>                      <!-- = <?php echo $i ?> -->
    <?php } ?>
</ul>

<ul>
	<?php while ($item = readdir($fileResource)) : ?>			<!-- readdir()讀檔   可使用 : end當作{} 以方便閱讀--> 
		<li><?php echo $item; ?></li>
	<?php endwhile; ?>
</ul>

// 使用表單開啟檔案
<!--在Clinet端
	input type="file" 可以讓使用者選擇檔案開啟 
	enctype="multipart/form-data" 表單的編碼方式
-->
<form method="post" enctype="multipart/form-data" action="">
	1. Select a file：<input type="file" name="file1" /><br /> <input
	type="submit" name="btnOK" value="2. 送出資料" />
</form>

<img src="IO_9.php">        <!-- img src裡也可以放.php -->


# PHP

- 基本語法
// === 型態相等，並且內容一樣
@require("MyLibrary.php");                      // @ 如果有出現錯誤訊息，不顯示，但依然不向後執行
$b = ($a > 0) ? "positive" : "negative";        // (邏輯判斷) ? 是 : 否;
!==                                             // 型態相同，內容不一樣or不同型別，內容相等(不完全相等)
print_r($陣列);                                  // 可列出結構


- 設定php.ini
phpinfo();              // 查詢設定檔   php.ini
// error_reporting = E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR 什麼訊息要報告
// display_errors = on
// 更改完需重新啟動MAMP

- 字串
$userName = "a";
echo "user name: $userName, Hello...";          // 雙引號可以參雜變數名稱
                                                // 單引號將所有內容轉為字串
$s = <<< AAA
    Line ??? <br>
    Line !!! <br>
AAA;
echo $s;                                        // <<< 代稱   可以輸入多行文字   代稱;


$s= "01234567";
$result = substr($s, 3, 4);                 // 找尋字串： substr(變數, 從哪開始, 取幾個)
echo $result . "<br>";
$result = str_replace("12", "00", $s);      // 取代字串： str_replace(字串, 取代的字串, 變數)
echo $result . "<br>";

$pos = strpos($s, "12", 2)                  // 找尋下標：strpos(變數, 想搜尋的字串, 從哪裡開始)
// 如果找不到就return false
(0的位置被找到 -> 0在if的判斷為false) 可用===判斷、在字串最前面加入填充物(Ex: $s = "x01234567")


- 運算
$x = 12;
$y = "34";
$result = $x+$y;                                // + 永遠做運算相加
$results = $x.$y;                               // . 永遠做字串相接

$x = 1;
$y = "0x10";                        // "0x10" -> 字串   0x10 -> 數字(16進位)
$z = 0x10;
$x + $y = 1                         // 字串會從前面開始轉換，直到無法轉換為止 -> 1 + 0 =1
$x + $z = 17

$x = 100;
$y = &$x;                           // &紀錄x的記憶體  -> x的記憶體 = y的記憶體
unset($x);                          // 將x的記憶體刪除，y依然為原本的記憶體區塊


mktime(13, 30, 0, 9, 10, 2012);    // mktime()時分秒月日年


- incude、require
include("testDefine.php");              // include() 可以複製testDefine的內容   (將獨立的testDefine檔案貼進來)
                                        // include_once() 沒有引用過才執行
require("testDefine.php");              // require()、require_once  態度較強硬，必要的存在，如果無法執行(Ex: 找不到檔案)會強制停止程式 


- POST
<?php
    // var_dump($_POST);                                    // var_dump() 方便除錯

    session_start();                                        // 使用session需宣告
    if(isset($_POST["okbtn"])){                             // =  if($_POST["okbtn"])
        $_SESSION["who"] = $_POST["userNameTextBox"];       // 將資料放進session陣列
        header("Location: hello.php");                      // header("Location: 網址、檔案")  -> 轉址
        exit();
    }
?>

<body>
    <form action="" method="post">                         
    <!-- method="post"   -> $_POST["name"]  
        action=".php" 要送往的地方          -> 不填表示把內容傳給自己
    -->
    <form>
<body>


- function
function ShowStar() {						// over laoding 一種程式有多種呼叫方式
	$args = func_get_args();				// func_get_args() 將使用者傳入的值紀錄
	
	if (!isset($args[0]))
		$args[0] = 5;
	if (!isset($args[1]))
		$args[1] = "*";
	ShowStar_all($args[0], $args[1]);
}


function test($i) {
	return $i + 1;
}
$x = 2;
$p = "test";
echo $p($x);			// 透過字串呼叫到字串所說的方法


$x = 100;
function foo(){ 
    f(isset($x)){
        echo $x . "<br>";
    }
    else{
        echo "not found <br>";
    }
    global $x;                  // 需要宣告為global才能看到全域變數
    echo "foo" . $x;
}
foo();

- 陣列
foreach ($season as $value){					// foreach($陣列 as $value)
    echo $value, "<br>";						// each 可用 "," 相連字串
}
foreach ($season as $key => $value){            // $key 找出key值   foreach($陣列 as $key => $value)
	echo $key, "=>", $value, "<br>";
}

- 排序(sort)        -> 破壞性排序(原陣列會被改變)
sort($testArray);				            // 照字串順序排列
natsort($testArray);			            // 自然排序法 -> 按照數字大小排列
usort($a, "cmp");                           // usort($陣列, "function名稱") -> user sort(可傳function進行排序)



# I/O
// __FILE__  可告訴現在檔案所存放的位置(路徑)
basename ( __FILE__ );                      // 目前的檔案名稱
dirname ( __FILE__ );                       // 資料夾名稱
opendir ( "檔名" );		            	    // 開檔
$_FILES["檔案原始名稱"]                       // 上傳檔案的原始名稱


$test = move_uploaded_file ( $objFile ["tmp_name"], "./" . $objFile ["name"] );	        // move_uploaded_file 將使用者選取的檔案(已上傳的檔案)搬出去指定位置
// tmp_name 一個臨時性檔案(來源檔案的亂數名稱)  "./" . $objFile ["name"]要搬去的位置與檔案名稱
$objFile ["type"]                          // 型態
objFile ["size"]                           // 檔案大小

$lines = file ( 'data.txt' );				// file(檔案名稱) 會傳入一個陣列
htmlspecialchars ( $line )                  // htmlspecialchars 如果檔案中含有< > 不當成html，顯示原內容(避免資安問題)

$contents = file_get_contents('data.txt');			        // file_get_contents('檔名') 把檔案內容用字串回傳出來
$fileSize = file_put_contents("data2.txt", $content);       // file_put_contents("寫出的檔案名稱", 內容)  -> 將檔案寫出去


$f = fopen("data.txt", "r");				// fopen("檔名", "r")開檔 (r or w)
while (!feof($f))							// feof($f) end of file 是否為檔案結尾處
{
	$line = fgets($f);						// fgets($f) 取得一行資料(字串)(不包含換行符號)
	$sData .= Trim($line) . "<br>";
}
fclose($f);									// fclose($f) 關檔

header("Content-Type: image/png");          // 圖片要轉碼 Content-Type:
echo fread($fileHandle, filesize($filename));       // fread 一次讀一定的資料，分段處理，減少資源



# class
public function __construct(){}                     // __construct 建構式
public function __destruct(){}                      // 物件摧毀
$animal = null;                                     //  當值 = null or 當程式結束時，物件也不再被需要參考     -> destoryed
$animal ->makeNoise();                              // 呼叫方法
//$animal ->weight=10;                              // 呼叫屬性不用加$

(參考Demo_class5.php)
public function __set($k,$v){}                      //  在類別沒有定義時設定了一個陌生的屬性 ->  呼叫__set
public function __get($k){}                         // 在類別沒有定義時呼叫了一個陌生的屬性 ->  呼叫__get

get_class_vars ( "class" )                          // get_class_vars ( "class" )	得知一個類別的成員陣列清單
unset ( $this->$varName );							// unset 清除記憶體

// 存進session裡的物件，每次重新讀取結束後會不斷的被消滅